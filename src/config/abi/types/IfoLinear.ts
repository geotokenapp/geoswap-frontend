/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IfoLinearInterface extends utils.Interface {
  functions: {
    "INITIAL_RELEASE_PERCENTAGE()": FunctionFragment;
    "PERCENTAGE_FACTOR()": FunctionFragment;
    "addressList(uint256)": FunctionFragment;
    "adminAddress()": FunctionFragment;
    "endBlock()": FunctionFragment;
    "isNativeTokenStaking()": FunctionFragment;
    "offeringAmount()": FunctionFragment;
    "offeringToken()": FunctionFragment;
    "raisingAmount()": FunctionFragment;
    "stakeToken()": FunctionFragment;
    "startBlock()": FunctionFragment;
    "totalAmount()": FunctionFragment;
    "totalDebt()": FunctionFragment;
    "userInfo(address)": FunctionFragment;
    "vestingEndBlock()": FunctionFragment;
    "initialize(address,address,uint256,uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "setOfferingAmount(uint256)": FunctionFragment;
    "setRaisingAmount(uint256)": FunctionFragment;
    "depositNative()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "harvest()": FunctionFragment;
    "getUserAllocation(address)": FunctionFragment;
    "getTotalStakeTokenBalance()": FunctionFragment;
    "getOfferingAmount(address)": FunctionFragment;
    "getOfferingAmountAllocations(address)": FunctionFragment;
    "getRefundingAmount(address)": FunctionFragment;
    "userTokenStatus(address)": FunctionFragment;
    "getAddressListLength()": FunctionFragment;
    "finalWithdraw(uint256,uint256)": FunctionFragment;
    "sweepToken(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "INITIAL_RELEASE_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENTAGE_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addressList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endBlock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isNativeTokenStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "offeringAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "offeringToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "raisingAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalDebt", values?: undefined): string;
  encodeFunctionData(functionFragment: "userInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "vestingEndBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setOfferingAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRaisingAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositNative",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "harvest", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getUserAllocation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalStakeTokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOfferingAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOfferingAmountAllocations",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRefundingAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userTokenStatus",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressListLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalWithdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "sweepToken", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "INITIAL_RELEASE_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERCENTAGE_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isNativeTokenStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offeringAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offeringToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raisingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakeToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalDebt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vestingEndBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOfferingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRaisingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalStakeTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOfferingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOfferingAmountAllocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRefundingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userTokenStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddressListLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sweepToken", data: BytesLike): Result;

  events: {
    "AdminFinalWithdraw(uint256,uint256)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "EmergencySweepWithdraw(address,address,uint256)": EventFragment;
    "Harvest(address,uint256,uint256)": EventFragment;
    "UpdateOfferingAmount(uint256,uint256)": EventFragment;
    "UpdateRaisingAmount(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminFinalWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencySweepWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Harvest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateOfferingAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateRaisingAmount"): EventFragment;
}

export type AdminFinalWithdrawEvent = TypedEvent<
  [BigNumber, BigNumber],
  { stakeTokenAmount: BigNumber; offerAmount: BigNumber }
>;

export type AdminFinalWithdrawEventFilter =
  TypedEventFilter<AdminFinalWithdrawEvent>;

export type DepositEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type EmergencySweepWithdrawEvent = TypedEvent<
  [string, string, BigNumber],
  { receiver: string; token: string; balance: BigNumber }
>;

export type EmergencySweepWithdrawEventFilter =
  TypedEventFilter<EmergencySweepWithdrawEvent>;

export type HarvestEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { user: string; offeringAmount: BigNumber; excessAmount: BigNumber }
>;

export type HarvestEventFilter = TypedEventFilter<HarvestEvent>;

export type UpdateOfferingAmountEvent = TypedEvent<
  [BigNumber, BigNumber],
  { previousOfferingAmount: BigNumber; newOfferingAmount: BigNumber }
>;

export type UpdateOfferingAmountEventFilter =
  TypedEventFilter<UpdateOfferingAmountEvent>;

export type UpdateRaisingAmountEvent = TypedEvent<
  [BigNumber, BigNumber],
  { previousRaisingAmount: BigNumber; newRaisingAmount: BigNumber }
>;

export type UpdateRaisingAmountEventFilter =
  TypedEventFilter<UpdateRaisingAmountEvent>;

export interface IfoLinear extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IfoLinearInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    INITIAL_RELEASE_PERCENTAGE(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERCENTAGE_FACTOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    addressList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    adminAddress(overrides?: CallOverrides): Promise<[string]>;

    endBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    isNativeTokenStaking(overrides?: CallOverrides): Promise<[boolean]>;

    offeringAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    offeringToken(overrides?: CallOverrides): Promise<[string]>;

    raisingAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakeToken(overrides?: CallOverrides): Promise<[string]>;

    startBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean, boolean] & {
        amount: BigNumber;
        offeringTokensClaimed: BigNumber;
        lastBlockHarvested: BigNumber;
        hasHarvestedInitial: boolean;
        refunded: boolean;
      }
    >;

    vestingEndBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _stakeToken: string,
      _offeringToken: string,
      _startBlock: BigNumberish,
      _endBlockOffset: BigNumberish,
      _vestingBlockOffset: BigNumberish,
      _offeringAmount: BigNumberish,
      _raisingAmount: BigNumberish,
      _adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOfferingAmount(
      _offerAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRaisingAmount(
      _raisingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositNative(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getUserAllocation(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalStakeTokenBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOfferingAmount(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOfferingAmountAllocations(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        offeringInitialHarvestAmount: BigNumber;
        offeringTokenVestedAmount: BigNumber;
      }
    >;

    getRefundingAmount(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userTokenStatus(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        stakeTokenHarvest: BigNumber;
        offeringTokenTotalHarvest: BigNumber;
        offeringTokenInitialHarvest: BigNumber;
        offeringTokenVestedHarvest: BigNumber;
        offeringTokensVesting: BigNumber;
      }
    >;

    getAddressListLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    finalWithdraw(
      _stakeTokenAmount: BigNumberish,
      _offerAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sweepToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  INITIAL_RELEASE_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

  PERCENTAGE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

  addressList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  adminAddress(overrides?: CallOverrides): Promise<string>;

  endBlock(overrides?: CallOverrides): Promise<BigNumber>;

  isNativeTokenStaking(overrides?: CallOverrides): Promise<boolean>;

  offeringAmount(overrides?: CallOverrides): Promise<BigNumber>;

  offeringToken(overrides?: CallOverrides): Promise<string>;

  raisingAmount(overrides?: CallOverrides): Promise<BigNumber>;

  stakeToken(overrides?: CallOverrides): Promise<string>;

  startBlock(overrides?: CallOverrides): Promise<BigNumber>;

  totalAmount(overrides?: CallOverrides): Promise<BigNumber>;

  totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

  userInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, boolean, boolean] & {
      amount: BigNumber;
      offeringTokensClaimed: BigNumber;
      lastBlockHarvested: BigNumber;
      hasHarvestedInitial: boolean;
      refunded: boolean;
    }
  >;

  vestingEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _stakeToken: string,
    _offeringToken: string,
    _startBlock: BigNumberish,
    _endBlockOffset: BigNumberish,
    _vestingBlockOffset: BigNumberish,
    _offeringAmount: BigNumberish,
    _raisingAmount: BigNumberish,
    _adminAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOfferingAmount(
    _offerAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRaisingAmount(
    _raisingAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositNative(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  harvest(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getUserAllocation(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalStakeTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getOfferingAmount(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOfferingAmountAllocations(
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      offeringInitialHarvestAmount: BigNumber;
      offeringTokenVestedAmount: BigNumber;
    }
  >;

  getRefundingAmount(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userTokenStatus(
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      stakeTokenHarvest: BigNumber;
      offeringTokenTotalHarvest: BigNumber;
      offeringTokenInitialHarvest: BigNumber;
      offeringTokenVestedHarvest: BigNumber;
      offeringTokensVesting: BigNumber;
    }
  >;

  getAddressListLength(overrides?: CallOverrides): Promise<BigNumber>;

  finalWithdraw(
    _stakeTokenAmount: BigNumberish,
    _offerAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sweepToken(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    INITIAL_RELEASE_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENTAGE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    addressList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    adminAddress(overrides?: CallOverrides): Promise<string>;

    endBlock(overrides?: CallOverrides): Promise<BigNumber>;

    isNativeTokenStaking(overrides?: CallOverrides): Promise<boolean>;

    offeringAmount(overrides?: CallOverrides): Promise<BigNumber>;

    offeringToken(overrides?: CallOverrides): Promise<string>;

    raisingAmount(overrides?: CallOverrides): Promise<BigNumber>;

    stakeToken(overrides?: CallOverrides): Promise<string>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    totalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean, boolean] & {
        amount: BigNumber;
        offeringTokensClaimed: BigNumber;
        lastBlockHarvested: BigNumber;
        hasHarvestedInitial: boolean;
        refunded: boolean;
      }
    >;

    vestingEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _stakeToken: string,
      _offeringToken: string,
      _startBlock: BigNumberish,
      _endBlockOffset: BigNumberish,
      _vestingBlockOffset: BigNumberish,
      _offeringAmount: BigNumberish,
      _raisingAmount: BigNumberish,
      _adminAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOfferingAmount(
      _offerAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRaisingAmount(
      _raisingAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositNative(overrides?: CallOverrides): Promise<void>;

    deposit(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    harvest(overrides?: CallOverrides): Promise<void>;

    getUserAllocation(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalStakeTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getOfferingAmount(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOfferingAmountAllocations(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        offeringInitialHarvestAmount: BigNumber;
        offeringTokenVestedAmount: BigNumber;
      }
    >;

    getRefundingAmount(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userTokenStatus(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        stakeTokenHarvest: BigNumber;
        offeringTokenTotalHarvest: BigNumber;
        offeringTokenInitialHarvest: BigNumber;
        offeringTokenVestedHarvest: BigNumber;
        offeringTokensVesting: BigNumber;
      }
    >;

    getAddressListLength(overrides?: CallOverrides): Promise<BigNumber>;

    finalWithdraw(
      _stakeTokenAmount: BigNumberish,
      _offerAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sweepToken(_token: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AdminFinalWithdraw(uint256,uint256)"(
      stakeTokenAmount?: null,
      offerAmount?: null
    ): AdminFinalWithdrawEventFilter;
    AdminFinalWithdraw(
      stakeTokenAmount?: null,
      offerAmount?: null
    ): AdminFinalWithdrawEventFilter;

    "Deposit(address,uint256)"(
      user?: string | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(user?: string | null, amount?: null): DepositEventFilter;

    "EmergencySweepWithdraw(address,address,uint256)"(
      receiver?: string | null,
      token?: string | null,
      balance?: null
    ): EmergencySweepWithdrawEventFilter;
    EmergencySweepWithdraw(
      receiver?: string | null,
      token?: string | null,
      balance?: null
    ): EmergencySweepWithdrawEventFilter;

    "Harvest(address,uint256,uint256)"(
      user?: string | null,
      offeringAmount?: null,
      excessAmount?: null
    ): HarvestEventFilter;
    Harvest(
      user?: string | null,
      offeringAmount?: null,
      excessAmount?: null
    ): HarvestEventFilter;

    "UpdateOfferingAmount(uint256,uint256)"(
      previousOfferingAmount?: null,
      newOfferingAmount?: null
    ): UpdateOfferingAmountEventFilter;
    UpdateOfferingAmount(
      previousOfferingAmount?: null,
      newOfferingAmount?: null
    ): UpdateOfferingAmountEventFilter;

    "UpdateRaisingAmount(uint256,uint256)"(
      previousRaisingAmount?: null,
      newRaisingAmount?: null
    ): UpdateRaisingAmountEventFilter;
    UpdateRaisingAmount(
      previousRaisingAmount?: null,
      newRaisingAmount?: null
    ): UpdateRaisingAmountEventFilter;
  };

  estimateGas: {
    INITIAL_RELEASE_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENTAGE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    addressList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    adminAddress(overrides?: CallOverrides): Promise<BigNumber>;

    endBlock(overrides?: CallOverrides): Promise<BigNumber>;

    isNativeTokenStaking(overrides?: CallOverrides): Promise<BigNumber>;

    offeringAmount(overrides?: CallOverrides): Promise<BigNumber>;

    offeringToken(overrides?: CallOverrides): Promise<BigNumber>;

    raisingAmount(overrides?: CallOverrides): Promise<BigNumber>;

    stakeToken(overrides?: CallOverrides): Promise<BigNumber>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    totalAmount(overrides?: CallOverrides): Promise<BigNumber>;

    totalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    userInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    vestingEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _stakeToken: string,
      _offeringToken: string,
      _startBlock: BigNumberish,
      _endBlockOffset: BigNumberish,
      _vestingBlockOffset: BigNumberish,
      _offeringAmount: BigNumberish,
      _raisingAmount: BigNumberish,
      _adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOfferingAmount(
      _offerAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRaisingAmount(
      _raisingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositNative(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getUserAllocation(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalStakeTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getOfferingAmount(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOfferingAmountAllocations(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRefundingAmount(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userTokenStatus(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAddressListLength(overrides?: CallOverrides): Promise<BigNumber>;

    finalWithdraw(
      _stakeTokenAmount: BigNumberish,
      _offerAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sweepToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    INITIAL_RELEASE_PERCENTAGE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERCENTAGE_FACTOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addressList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    adminAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isNativeTokenStaking(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offeringAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    offeringToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    raisingAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vestingEndBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _stakeToken: string,
      _offeringToken: string,
      _startBlock: BigNumberish,
      _endBlockOffset: BigNumberish,
      _vestingBlockOffset: BigNumberish,
      _offeringAmount: BigNumberish,
      _raisingAmount: BigNumberish,
      _adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOfferingAmount(
      _offerAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRaisingAmount(
      _raisingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositNative(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getUserAllocation(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalStakeTokenBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOfferingAmount(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOfferingAmountAllocations(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRefundingAmount(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userTokenStatus(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAddressListLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalWithdraw(
      _stakeTokenAmount: BigNumberish,
      _offerAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sweepToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
